name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    name: 🧪 Run Unit Tests
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v3

      - name: 🐍 Set Up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: 📦 Install Dependencies
        run: |
          pip install -r api/libraries.txt
          pip install pytest

      - name: ⏳ Wait for DB to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

      - name: 🧪 Run Pytest
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: PYTHONPATH=$PWD pytest tests/

  build:
    name: 🏗️ Build & Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v3

      - name: 🔑 Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🐳 Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/monitoring-platform:latest .

      - name: 📤 Push Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/monitoring-platform:latest

  deploy:
    name: 🚀 Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v3

      - name: ⚙️ Set Up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.2'

      - name: 🚀 Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/
